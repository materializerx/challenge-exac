/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ETHPoolV2, ETHPoolV2Interface } from "../../contracts/ETHPoolV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "_depositPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_notYetRewardableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_rewardableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_rewardsPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accounts",
    outputs: [
      {
        internalType: "uint256",
        name: "claimableDepositAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardCalculableAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "claimableRewards",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastDepositTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositReward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRewardDepositTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPoolBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDepositBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109838061007e6000396000f3fe6080604052600436106100dd5760003560e01c80637a5c08ae1161007f578063b480ebe411610059578063b480ebe414610213578063d0e30db014610229578063e8c0a0df14610231578063f2fde38b1461024657600080fd5b80637a5c08ae146101c057806380ad32dc146101d55780638da5cb5b146101eb57600080fd5b80635e5c06e2116100bb5780635e5c06e21461012b5780635ec2dc8d1461018d5780635f905ffc14610195578063715018a6146101ab57600080fd5b80630503ce24146100e2578063098887fa1461010b5780633ccfd60b14610121575b600080fd5b3480156100ee57600080fd5b506100f860035481565b6040519081526020015b60405180910390f35b34801561011757600080fd5b506100f860015481565b610129610266565b005b34801561013757600080fd5b5061016d6101463660046108c0565b60066020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610102565b6101296103e1565b3480156101a157600080fd5b506100f860045481565b3480156101b757600080fd5b5061012961047c565b3480156101cc57600080fd5b506001546100f8565b3480156101e157600080fd5b506100f860055481565b3480156101f757600080fd5b506000546040516001600160a01b039091168152602001610102565b34801561021f57600080fd5b506100f860025481565b6101296104e2565b34801561023d57600080fd5b506002546100f8565b34801561025257600080fd5b506101296102613660046108c0565b610658565b336000818152600660205260409020600301541580159061029b57506005543360009081526006602052604090206003015411155b1561036c57336000908152600660205260409020600101546004541561036a576000600454600154836102ce9190610906565b6102d89190610925565b905080600160008282546102ec9190610947565b9091555050336000908152600660205260408120600201805483929061031390849061095e565b9091555050336000908152600660205260408120805484929061033790849061095e565b909155505033600090815260066020526040812060010181905560048054849290610363908490610947565b9091555050505b505b33600090815260066020526040812080546002808301805460018501805487875590879055918690556003909401949094555490929083906103af908390610947565b6103b99190610947565b6002556103db816103ca848661095e565b6103d4919061095e565b339061073a565b50505050565b6000546001600160a01b031633146104405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b3460016000828254610452919061095e565b9091555050426005556003546004805460009061047090849061095e565b90915550506000600355565b6000546001600160a01b031633146104d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610437565b6104e06000610858565b565b336000818152600660205260409020600301541580159061051757506005543360009081526006602052604090206003015411155b156105e85733600090815260066020526040902060010154600454156105e65760006004546001548361054a9190610906565b6105549190610925565b905080600160008282546105689190610947565b9091555050336000908152600660205260408120600201805483929061058f90849061095e565b909155505033600090815260066020526040812080548492906105b390849061095e565b9091555050336000908152600660205260408120600101819055600480548492906105df908490610947565b9091555050505b505b336000908152600660205260408120600101805434929061060a90849061095e565b9091555050336000908152600660205260408120426003909101556002805434929061063790849061095e565b925050819055503460036000828254610650919061095e565b909155505050565b6000546001600160a01b031633146106b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610437565b6001600160a01b03811661072e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610437565b61073781610858565b50565b8047101561078a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610437565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107d7576040519150601f19603f3d011682016040523d82523d6000602084013e6107dc565b606091505b50509050806108535760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610437565b505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156108d257600080fd5b81356001600160a01b03811681146108e957600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610920576109206108f0565b500290565b60008261094257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610959576109596108f0565b500390565b60008219821115610971576109716108f0565b50019056fea164736f6c634300080d000a";

type ETHPoolV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ETHPoolV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ETHPoolV2__factory extends ContractFactory {
  constructor(...args: ETHPoolV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ETHPoolV2> {
    return super.deploy(overrides || {}) as Promise<ETHPoolV2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ETHPoolV2 {
    return super.attach(address) as ETHPoolV2;
  }
  override connect(signer: Signer): ETHPoolV2__factory {
    return super.connect(signer) as ETHPoolV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ETHPoolV2Interface {
    return new utils.Interface(_abi) as ETHPoolV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ETHPoolV2 {
    return new Contract(address, _abi, signerOrProvider) as ETHPoolV2;
  }
}
